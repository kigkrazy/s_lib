# 文件：Jamroot
# 说明:
#   该文件为的存在表示，这个目录为整个工程到根目录。
#   在子工程中的Jamfile都会不断向上层目录查找直到找到Jamroot，并且将
#   Jamroot中的定义声明包含到本身。
import modules ;
import os ;
import errors ;
import feature : feature ;

BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;
CXXFLAGS = [ modules.peek : CXXFLAGS ] ;
LDFLAGS = [ modules.peek : LDFLAGS ] ;

#类似设置软链接，将$(BOOST_ROOT)目录链接到/boost
if $(BOOST_ROOT)
{
        use-project /boost : $(BOOST_ROOT) ;
}


#此处声明库目录
local library-search-path = <search>/opt/local/lib <search>/usr/lib <search>/usr/local/lib <search>/usr/lib64 <search>/usr/local/lib64 ;

#此处声明lib文件,linking-base中调用的库,需要在此先声明。
#有些库是从源码或者子工程链接到就不要到此处声明了。
lib boost_filesystem : : <name>boost_filesystem $(library-search-path) ;
lib boost_thread : : <name>boost_thread $(library-search-path) ;
lib boost_system : : <name>boost_system $(library-search-path) ;
lib boost_program_options : : <name>boost_program_options $(library-search-path) ;
lib boost_regex : : <name>boost_regex $(library-search-path) ;

rule linking-base ( properties * )
{
    local result ;
    #调用系统到BOOST共享库
    if <boost>system in $(properties)
    {
        result += <library>boost_filesystem
            <library>boost_thread
            <library>boost_system
            <library>boost_program_options
            <library>boost_regex
            ;
    }

    #调用BOOST源码目录下的子工程编译LIB库进行链接
    if <boost>source in $(properties)
    {
        if <boost-link>static in $(properties)
        {
            result += <library>/boost/filesystem//boost_filesystem/<link>static
                <library>/boost/system//boost_system/<link>static
                <library>/boost/program_options//boost_program_options/<link>static
                <library>/boost/regex//boost_regex/<link>static
                ;
            result += <library>/boost/thread//boost_thread/<link>static ;
        }
        else
        {
            result += <library>/boost/thread//boost_thread/<link>shared
                <library>/boost/filesystem//boost_filesystem/<link>shared
                <library>/boost/program_options//boost_program_options/<link>shared
                <library>/boost/system//boost_system/<link>shared
                <library>/boost/regex//boost_regex/<link>shared
                ;
        }
        result += <include>$(BOOST_ROOT) <define>BOOST_ALL_NO_LIB ;
    }

    #可以在此添加其他规则
    #类似result += <include>$(BOOST_ROOT) <define>BOOST_ALL_NO_LIB ;



    return $(result) ;
}

#定义编译控制选项
#feature一些属性介绍
#link-incompatible 不相容的选项只能二选一，如下面到BOOST只能二选一。
#propagated 指定目标文件所需要到库文件的属性统一，例如：目标文件启用"优化"我们所需要到库文件也需要启用优化属性，这时候就由有这个属性到feature控制。
#composite 通常用于定义代码中的一些宏控制，比如说：<define>BOOST_ALL_NO_LIB,在这个属性的feature我们通常使用这个定义。 
#
#
#
feature boost : system source : link-incompatible propagated ;
feature boost-link : static shared : composite link-incompatible ;










